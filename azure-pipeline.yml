trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  vmImage: 'ubuntu-16.04'
  terraformVersion: 0.12.7

stages:
- stage: Prepare
  displayName: Prepare
  jobs:
  - job: Prepare
    displayName: Prepare
    pool:
      vmImage: $(vmImage)
    steps:
    - publish: '$(system.defaultWorkingDirectory)/tf'
      artifact: 'tf-files'
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)
    - script: |
        cd $(system.defaultWorkingDirectory)/tf
        terraform init -backend=false
        terraform validate
      displayName: 'Terraform validate'
- stage: development
  displayName: development
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Plan
    variables:
      location: eastus
      # for release, define 5 more variables: resourceGroupName, clientId, clientSecret, subscriptionId and tenantId in the pipeline definition UI
    displayName: Plan
    pool:
      vmImage: $(vmImage)
    steps:
    - checkout: none
    - script: |
        cd $(system.defaultWorkingDirectory)/tf
        terraform init
        terraform plan -var resource_group_name=$(resourceGroupName) -var location=$(location)
      displayName: 'Terraform plan'
      env:
          ARM_TENANT_ID: $(tenantId)
          ARM_SUBSCRIPTION_ID: $(subscriptionId)
          ARM_CLIENT_ID: $(clientId)
          ARM_CLIENT_SECRET: $(clientSecret)
  - deployment: Apply
    variables:
      location: eastus
      # for release, define 5 more variables: resourceGroupName, clientId, clientSecret, subscriptionId and tenantId in the pipeline definition UI
    displayName: Apply
    pool:
      vmImage: $(vmImage)
    environment: "tf-development"
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - script: |
              cd $(system.defaultWorkingDirectory)/tf
              terraform init
              terraform apply -auto-approve -var resource_group_name=$(resourceGroupName) -var location=$(location)
            displayName: 'Terraform apply'
            env:
                ARM_TENANT_ID: $(tenantId)
                ARM_SUBSCRIPTION_ID: $(subscriptionId)
                ARM_CLIENT_ID: $(clientId)
                ARM_CLIENT_SECRET: $(clientSecret)
