trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

variables:
  vmImage: 'ubuntu-16.04'
  terraformVersion: 0.12.7
  tfFilesArtifactName: 'tf-files'
  tfPlanArtifactName: 'tf-plan'

stages:
- stage: 'Prepare'
  displayName: 'Prepare'
  jobs:
  - job: 'Prepare'
    displayName: 'Prepare'
    pool:
      vmImage: $(vmImage)
    steps:
    - publish: '$(system.defaultWorkingDirectory)/tf'
      artifact: $(tfFilesArtifactName)
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)
    - script: |
        cd $(system.defaultWorkingDirectory)/tf
        terraform init -backend=false
        terraform validate
      displayName: 'Terraform validate'
- stage: 'Plan_development'
  displayName: 'Plan development'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: 'Plan'
    variables:
      location: 'eastus'
      # for release, define 5 more variables: resourceGroupName, clientId, clientSecret, subscriptionId and tenantId in the pipeline definition UI
    displayName: 'Plan'
    pool:
      vmImage: $(vmImage)
    steps:
    - checkout: none
    - download: current
      artifact: $(tfFilesArtifactName)
    - script: |
        cd $(pipeline.workspace)/$(tfFilesArtifactName)
        terraform init
        terraform plan -out=tf-plan -var resource_group_name=$(resourceGroupName) -var location=$(location)
        terraform apply tf-plan
      displayName: 'Terraform plan'
      env:
          ARM_TENANT_ID: $(tenantId)
          ARM_SUBSCRIPTION_ID: $(subscriptionId)
          ARM_CLIENT_ID: $(clientId)
          ARM_CLIENT_SECRET: $(clientSecret)
    - publish: '$(pipeline.workspace)/$(tfFilesArtifactName)'
      artifact: $(tfPlanArtifactName)
- stage: 'Apply_development'
  displayName: 'Apply development'
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: 'Apply'
    # define 5 more variables: clientId, clientSecret, subscriptionId and tenantId in the pipeline definition UI
    displayName: 'Apply'
    pool:
      vmImage: $(vmImage)
    environment: "tf-development"
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - download: current
            artifact: $(tfPlanArtifactName)
          - script: |
              cd $(pipeline.workspace)/$(tfPlanArtifactName)
              terraform apply tf-plan
            displayName: 'Terraform apply'
            env:
                ARM_TENANT_ID: $(tenantId)
                ARM_SUBSCRIPTION_ID: $(subscriptionId)
                ARM_CLIENT_ID: $(clientId)
                ARM_CLIENT_SECRET: $(clientSecret)
